import "server-only";

import { SignJWT, jwtVerify } from "jose";
import { SessionPayload } from "@/app/lib/definitions";
import { cookies } from "next/headers";
import { db } from "@/db";
import { sessions } from "@/db/schema";

const secretKey = process.env.SESSION_SECRET;
const encodedKey = new TextEncoder().encode(secretKey);

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: "HS256" })
    .setIssuedAt()
    .setExpirationTime("7d")
    .sign(encodedKey);
}

export async function decrypt(session: string | undefined = "") {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ["HS256"],
    });
    return payload;
  } catch (error) {
    console.log("Failed to verify session");
  }
}

export async function createSession(userId: number) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
  const session = await encrypt({ userId, expiresAt });
  const cookieStore = await cookies();

  cookieStore.set("session", session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: "lax", // Strict, Lax, None
    path: "/",
  });
}

export async function updateSession() {
  const session = (await cookies()).get("session")?.value;
  const payload = await decrypt(session);

  if (!session || !payload) {
    return null;
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

  const cookieStore = await cookies();
  cookieStore.set("session", session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: "lax",
    path: "/",
  });
}

export async function deleteSession() {
  const cookieStore = await cookies();
  cookieStore.delete("session");
}

export async function isSession() {
  const session = (await cookies()).get("session")?.value;
  const payload = await decrypt(session);

  if (!session || !payload) {
    return false;
  }

  return true;
}

export async function createSessionInDB(id: number, role: string) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.userId });

  const sessionId = data[0].id;

  // 2. Encrypt the session ID
  const session = await encrypt({ userId: sessionId, expiresAt, role: role });

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies();
  cookieStore.set("session", session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: "lax",
    path: "/",
  });
}

// HttpOnly : ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßÅ‡¶ï‡¶ø HttpOnly ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ JavaScript (client-side) ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ì‡¶á ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§

// ‡¶ï‡ßá‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞: XSS (Cross-Site Scripting) ‡¶Ü‡¶ï‡ßç‡¶∞‡¶Æ‡¶£ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
// ‚û°Ô∏è ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: document.cookie ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§

// üîí Secure
// ‡¶Æ‡¶æ‡¶®‡ßá: Secure ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ HTTPS ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
// ‡¶ï‡ßá‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞: ‡¶Ö‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ HTTP ‡¶§‡ßá ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ü‡¶ü‡¶ï‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
// ‚û°Ô∏è ‡¶è‡¶§‡ßá man-in-the-middle ‡¶Ü‡¶ï‡ßç‡¶∞‡¶Æ‡¶£ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶Æ‡ßá‡¶≤‡ßá‡•§

// üåç SameSite : ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶ï‡¶ñ‡¶® cross-site request ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§

//   Strict
// ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶á ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
// ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ request ‡¶è ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§
// ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶, ‡¶§‡¶¨‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶ï‡¶Æ‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶ñ‡¶® ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§

//   Lax
// ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Æ‡ßã‡¶°‡•§
// ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ cross-site request ‡¶è ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ "safe" request (‡¶Ø‡ßá‡¶Æ‡¶® GET, top-level navigation) ‡¶è ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Google search ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶è‡¶≤‡ßã, ‡¶§‡¶ñ‡¶® ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

//   None
// ‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ cross-site request ‡¶è ‡¶ï‡ßÅ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
// ‡¶§‡¶¨‡ßá Secure=true ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
// ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ third-party ‡¶∏‡ßá‡¶¨‡¶æ (‡¶Ø‡ßá‡¶Æ‡¶® payment gateway, social login) ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡•§
